// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package merkle_distributor

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateConfig is the `updateConfig` instruction.
type UpdateConfig struct {
	ClaimDeadline *int64 `bin:"optional"`

	// [0] = [WRITE, SIGNER] adminAuth
	//
	// [1] = [] distributor
	//
	// [2] = [WRITE] config
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateConfigInstructionBuilder creates a new `UpdateConfig` instruction builder.
func NewUpdateConfigInstructionBuilder() *UpdateConfig {
	nd := &UpdateConfig{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetClaimDeadline sets the "claimDeadline" parameter.
func (inst *UpdateConfig) SetClaimDeadline(claimDeadline int64) *UpdateConfig {
	inst.ClaimDeadline = &claimDeadline
	return inst
}

// SetAdminAuthAccount sets the "adminAuth" account.
func (inst *UpdateConfig) SetAdminAuthAccount(adminAuth ag_solanago.PublicKey) *UpdateConfig {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(adminAuth).WRITE().SIGNER()
	return inst
}

// GetAdminAuthAccount gets the "adminAuth" account.
func (inst *UpdateConfig) GetAdminAuthAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDistributorAccount sets the "distributor" account.
func (inst *UpdateConfig) SetDistributorAccount(distributor ag_solanago.PublicKey) *UpdateConfig {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(distributor)
	return inst
}

// GetDistributorAccount gets the "distributor" account.
func (inst *UpdateConfig) GetDistributorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetConfigAccount sets the "config" account.
func (inst *UpdateConfig) SetConfigAccount(config ag_solanago.PublicKey) *UpdateConfig {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(config).WRITE()
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *UpdateConfig) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpdateConfig) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateConfig {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpdateConfig) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateConfig) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateConfig,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateConfig) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateConfig) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.AdminAuth is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Distributor is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *UpdateConfig) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateConfig")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("ClaimDeadline (OPT)", inst.ClaimDeadline))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    adminAuth", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  distributor", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       config", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ClaimDeadline` param (optional):
	{
		if obj.ClaimDeadline == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ClaimDeadline)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *UpdateConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ClaimDeadline` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ClaimDeadline)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewUpdateConfigInstruction declares a new UpdateConfig instruction with the provided parameters and accounts.
func NewUpdateConfigInstruction(
	// Parameters:
	claimDeadline int64,
	// Accounts:
	adminAuth ag_solanago.PublicKey,
	distributor ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *UpdateConfig {
	return NewUpdateConfigInstructionBuilder().
		SetClaimDeadline(claimDeadline).
		SetAdminAuthAccount(adminAuth).
		SetDistributorAccount(distributor).
		SetConfigAccount(config).
		SetSystemProgramAccount(systemProgram)
}
