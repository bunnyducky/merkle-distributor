// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package merkle_distributor

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type MerkleDistributor struct {
	Base               ag_solanago.PublicKey
	AdminAuth          ag_solanago.PublicKey
	Bump               uint8
	Root               [32]uint8
	Mint               ag_solanago.PublicKey
	MaxTotalClaim      uint64
	MaxNumNodes        uint64
	TotalAmountClaimed uint64
	NumNodesClaimed    uint64
}

var MerkleDistributorDiscriminator = [8]byte{77, 119, 139, 70, 84, 247, 12, 26}

func (obj MerkleDistributor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MerkleDistributorDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Base` param:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return err
	}
	// Serialize `AdminAuth` param:
	err = encoder.Encode(obj.AdminAuth)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Root` param:
	err = encoder.Encode(obj.Root)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `MaxTotalClaim` param:
	err = encoder.Encode(obj.MaxTotalClaim)
	if err != nil {
		return err
	}
	// Serialize `MaxNumNodes` param:
	err = encoder.Encode(obj.MaxNumNodes)
	if err != nil {
		return err
	}
	// Serialize `TotalAmountClaimed` param:
	err = encoder.Encode(obj.TotalAmountClaimed)
	if err != nil {
		return err
	}
	// Serialize `NumNodesClaimed` param:
	err = encoder.Encode(obj.NumNodesClaimed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MerkleDistributor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MerkleDistributorDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[77 119 139 70 84 247 12 26]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return err
	}
	// Deserialize `AdminAuth`:
	err = decoder.Decode(&obj.AdminAuth)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Root`:
	err = decoder.Decode(&obj.Root)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `MaxTotalClaim`:
	err = decoder.Decode(&obj.MaxTotalClaim)
	if err != nil {
		return err
	}
	// Deserialize `MaxNumNodes`:
	err = decoder.Decode(&obj.MaxNumNodes)
	if err != nil {
		return err
	}
	// Deserialize `TotalAmountClaimed`:
	err = decoder.Decode(&obj.TotalAmountClaimed)
	if err != nil {
		return err
	}
	// Deserialize `NumNodesClaimed`:
	err = decoder.Decode(&obj.NumNodesClaimed)
	if err != nil {
		return err
	}
	return nil
}

type Config struct {
	Distributor   ag_solanago.PublicKey
	ClaimDeadline *int64 `bin:"optional"`
}

var ConfigDiscriminator = [8]byte{155, 12, 170, 224, 30, 250, 204, 130}

func (obj Config) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Distributor` param:
	err = encoder.Encode(obj.Distributor)
	if err != nil {
		return err
	}
	// Serialize `ClaimDeadline` param (optional):
	{
		if obj.ClaimDeadline == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.ClaimDeadline)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Config) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[155 12 170 224 30 250 204 130]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Distributor`:
	err = decoder.Decode(&obj.Distributor)
	if err != nil {
		return err
	}
	// Deserialize `ClaimDeadline` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.ClaimDeadline)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type ClaimStatus struct {
	Claimant      ag_solanago.PublicKey
	ClaimedAt     int64
	ClaimedAmount uint64
}

var ClaimStatusDiscriminator = [8]byte{22, 183, 249, 157, 247, 95, 150, 96}

func (obj ClaimStatus) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(ClaimStatusDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Claimant` param:
	err = encoder.Encode(obj.Claimant)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAt` param:
	err = encoder.Encode(obj.ClaimedAt)
	if err != nil {
		return err
	}
	// Serialize `ClaimedAmount` param:
	err = encoder.Encode(obj.ClaimedAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *ClaimStatus) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(ClaimStatusDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[22 183 249 157 247 95 150 96]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Claimant`:
	err = decoder.Decode(&obj.Claimant)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAt`:
	err = decoder.Decode(&obj.ClaimedAt)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedAmount`:
	err = decoder.Decode(&obj.ClaimedAmount)
	if err != nil {
		return err
	}
	return nil
}
