// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package merkle_distributor

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Claim is the `claim` instruction.
type Claim struct {
	Bump   *uint8
	Index  *uint64
	Amount *uint64
	Proof  *[][32]uint8

	// [0] = [WRITE] distributor
	//
	// [1] = [] config
	//
	// [2] = [WRITE] claimStatus
	//
	// [3] = [WRITE] from
	//
	// [4] = [WRITE] to
	//
	// [5] = [] claimant
	//
	// [6] = [WRITE, SIGNER] payer
	//
	// [7] = [] systemProgram
	//
	// [8] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimInstructionBuilder creates a new `Claim` instruction builder.
func NewClaimInstructionBuilder() *Claim {
	nd := &Claim{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *Claim) SetBump(bump uint8) *Claim {
	inst.Bump = &bump
	return inst
}

// SetIndex sets the "index" parameter.
func (inst *Claim) SetIndex(index uint64) *Claim {
	inst.Index = &index
	return inst
}

// SetAmount sets the "amount" parameter.
func (inst *Claim) SetAmount(amount uint64) *Claim {
	inst.Amount = &amount
	return inst
}

// SetProof sets the "proof" parameter.
func (inst *Claim) SetProof(proof [][32]uint8) *Claim {
	inst.Proof = &proof
	return inst
}

// SetDistributorAccount sets the "distributor" account.
func (inst *Claim) SetDistributorAccount(distributor ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(distributor).WRITE()
	return inst
}

// GetDistributorAccount gets the "distributor" account.
func (inst *Claim) GetDistributorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetConfigAccount sets the "config" account.
func (inst *Claim) SetConfigAccount(config ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(config)
	return inst
}

// GetConfigAccount gets the "config" account.
func (inst *Claim) GetConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetClaimStatusAccount sets the "claimStatus" account.
func (inst *Claim) SetClaimStatusAccount(claimStatus ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(claimStatus).WRITE()
	return inst
}

// GetClaimStatusAccount gets the "claimStatus" account.
func (inst *Claim) GetClaimStatusAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFromAccount sets the "from" account.
func (inst *Claim) SetFromAccount(from ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(from).WRITE()
	return inst
}

// GetFromAccount gets the "from" account.
func (inst *Claim) GetFromAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetToAccount sets the "to" account.
func (inst *Claim) SetToAccount(to ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(to).WRITE()
	return inst
}

// GetToAccount gets the "to" account.
func (inst *Claim) GetToAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetClaimantAccount sets the "claimant" account.
func (inst *Claim) SetClaimantAccount(claimant ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(claimant)
	return inst
}

// GetClaimantAccount gets the "claimant" account.
func (inst *Claim) GetClaimantAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
func (inst *Claim) SetPayerAccount(payer ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *Claim) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Claim) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Claim) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Claim) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Claim) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst Claim) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Claim,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Claim) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Claim) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.Index == nil {
			return errors.New("Index parameter is not set")
		}
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
		if inst.Proof == nil {
			return errors.New("Proof parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Distributor is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Config is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.ClaimStatus is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.From is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.To is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Claimant is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Claim) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Claim")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("  Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param(" Index", *inst.Index))
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
						paramsBranch.Child(ag_format.Param(" Proof", *inst.Proof))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("  distributor", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       config", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  claimStatus", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         from", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           to", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     claimant", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" tokenProgram", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj Claim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	// Serialize `Proof` param:
	err = encoder.Encode(obj.Proof)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Claim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	// Deserialize `Proof`:
	err = decoder.Decode(&obj.Proof)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimInstruction declares a new Claim instruction with the provided parameters and accounts.
func NewClaimInstruction(
	// Parameters:
	bump uint8,
	index uint64,
	amount uint64,
	proof [][32]uint8,
	// Accounts:
	distributor ag_solanago.PublicKey,
	config ag_solanago.PublicKey,
	claimStatus ag_solanago.PublicKey,
	from ag_solanago.PublicKey,
	to ag_solanago.PublicKey,
	claimant ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Claim {
	return NewClaimInstructionBuilder().
		SetBump(bump).
		SetIndex(index).
		SetAmount(amount).
		SetProof(proof).
		SetDistributorAccount(distributor).
		SetConfigAccount(config).
		SetClaimStatusAccount(claimStatus).
		SetFromAccount(from).
		SetToAccount(to).
		SetClaimantAccount(claimant).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram)
}
